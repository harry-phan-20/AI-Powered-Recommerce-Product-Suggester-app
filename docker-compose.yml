version: '3.8'

services:
  # Frontend development server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_BACKEND_URL=http://localhost:3001
    command: npm run dev
    networks:
      - renow-network

  # Backend API server
  backend:
    build:
      context: ./server
      dockerfile: ../Dockerfile
      target: backend-builder
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000
    volumes:
      - ./server:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - renow-network
    depends_on:
      - redis

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - renow-network
    command: redis-server --appendonly yes

  # Nginx reverse proxy for production-like setup
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - renow-network

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - renow-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - renow-network
    depends_on:
      - prometheus

volumes:
  redis-data:
  grafana-data:

networks:
  renow-network:
    driver: bridge
